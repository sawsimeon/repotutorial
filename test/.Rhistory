version
version
library(rcdk)
installed.packages("rcdk")
version
library(caret)
install.packages("caret")
library(caret)
library(rcdk)
install.packages("rcdk")
library(rcdk)
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("data.table")
library(data.table)
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("rJava")
setwd("/media/server2/Seagate Backup Plus Drive/Epitode_project")
library(readxl)
df <- read_excel("data.xlsx")
df <- na.omit(df)
Class <- df$Class
Class <- as.factor(Class)
descriptors <- df[, 2:ncol(df)]
library(caret)
descriptor_remove_zero_var <- descriptors[, -nearZeroVar(descriptors)]
df <- cbind(Class, descriptor_remove_zero_var)
#### feature selection with Genetic Algorithm
library(ranger)
library(parallel)
library(doSNOW)
cl <- makeCluster(24)
registerDoSNOW(cl)
results_train <- list(10)
results_train <- foreach(i = 1:10) %dopar% {
in_train <- caret::createDataPartition(df$Class, p = 0.80, list = FALSE)
train <- df[in_train, ]
test <- df[-in_train, ]
rm(in_train)
rm(test)
fit <- ranger::ranger(Class ~., data = train, write.forest  = TRUE,
save.memory = TRUE, importance = "impurity")
actual <- train$Class
prediction <- ranger::predictions(fit, train)
rm(fit)
rm(train)
results <- caret::confusionMatrix(prediction, actual)
#results <- results$table
rm(actual)
rm(prediction)
results_train[[i]] <- results$byClass
}
results_train[[i]]
results_train[[1]]
results_train[[2]]
?subset
B-negative <- subset(df, Class == "B-positive")
class
Class
B-negative <- subset(df, Class == "B-negative")
names(df)
B_negative <- subset(df, Class == "B-negative")
Class
B_positive <- subset(df, Class == "B-positive")
Dual <- subset(df, Class == "Dual")
T_negative <- subset(df, Class == "T-negative")
T_positive <- subset(df, Class == "T-positive")
library(dplyr)
install.packages("dplyr")
library(dplyr)
B_negative <- sample_n(B_negative, size = 681, replace = TRUE)
B_positive <- sample_n(B_positive, size = 681, replace = TRUE)
Dual <- sample_n(Dual, size = 681, replace = TRUE)
T_negative <- sample_n(T_negative, size = 681, replace = TRUE)
T_positive <- sample_n(T_positive, size = 681, replace = TRUE)
df <- rbind(B_negative, B_positive, Dual, T_negative, T_positive)
#### feature selection with Genetic Algorithm
library(ranger)
library(parallel)
library(doSNOW)
cl <- makeCluster(24)
registerDoSNOW(cl)
results_train <- list(10)
results_train <- foreach(i = 1:10) %dopar% {
in_train <- caret::createDataPartition(df$Class, p = 0.80, list = FALSE)
train <- df[in_train, ]
test <- df[-in_train, ]
rm(in_train)
rm(test)
fit <- ranger::ranger(Class ~., data = train, write.forest  = TRUE,
save.memory = TRUE, importance = "impurity")
actual <- train$Class
prediction <- ranger::predictions(fit, train)
rm(fit)
rm(train)
results <- caret::confusionMatrix(prediction, actual)
#results <- results$table
rm(actual)
rm(prediction)
results_train[[i]] <- results$byClass
}
results_train[[1]]
results_train[[2]]
stopCluster(cl)
library(ranger)
library(parallel)
library(doSNOW)
cl <- makeCluster(24)
registerDoSNOW(cl)
results_test <- list(10)
results_test <- foreach(i = 1:10) %dopar% {
in_train <- caret::createDataPartition(df$Class, p = 0.80, list = FALSE)
train <- df[in_train, ]
test <- df[-in_train, ]
rm(in_train)
fit <- ranger::ranger(Class ~., data = train, write.forest  = TRUE,
save.memory = TRUE, importance = "impurity")
actual <- test$Class
prediction <- ranger::predictions(fit, test)
rm(fit)
rm(train)
rm(test)
results <- caret::confusionMatrix(prediction, actual)
#results <- results$table
rm(actual)
rm(prediction)
results_test[[i]] <- results$byClass
}
stopCluster(cl)
library(ranger)
library(parallel)
library(doSNOW)
cl <- makeCluster(24)
registerDoSNOW(cl)
results_test <- list(10)
results_test <- foreach(i = 1:10) %dopar% {
in_train <- caret::createDataPartition(df$Class, p = 0.80, list = FALSE)
train <- df[in_train, ]
test <- df[-in_train, ]
rm(in_train)
fit <- ranger::ranger(Class ~., data = train, write.forest  = TRUE,
save.memory = TRUE, importance = "impurity")
actual <- test$Class
prediction <- ranger::predictions(fit, test)
rm(fit)
rm(train)
rm(test)
results <- caret::confusionMatrix(prediction, actual)
#results <- results$table
rm(actual)
rm(prediction)
results_test[[i]] <- results$byClass
}
dim(df)
681*5
in_train <- caret::createDataPartition(df$Class, p = 0.80, list = FALSE)
train <- df[in_train, ]
test <- df[-in_train, ]
rm(in_train)
fit <- ranger::ranger(Class ~., data = train, write.forest  = TRUE,
save.memory = TRUE, importance = "impurity")
actual <- test$Class
prediction <- ranger::predictions(fit, test)
results <- caret::confusionMatrix(prediction, actual)
length(prediction)
length(actual)
test <- df[-in_train, ]
in_train <- caret::createDataPartition(df$Class, p = 0.80, list = FALSE)
train <- df[in_train, ]
test <- df[-in_train, ]
dim(train)
dim(test)
dim(prediction)
length(prediction)
prediction <- predict(fit, test)
prediction <- predict$predictions
prediction <- prediction$predictions
length(actual)
length(prediction)
library(ranger)
library(parallel)
library(doSNOW)
cl <- makeCluster(24)
registerDoSNOW(cl)
results_test <- list(10)
results_test <- foreach(i = 1:10) %dopar% {
in_train <- caret::createDataPartition(df$Class, p = 0.80, list = FALSE)
train <- df[in_train, ]
test <- df[-in_train, ]
rm(in_train)
fit <- ranger::ranger(Class ~., data = train, write.forest  = TRUE,
save.memory = TRUE, importance = "impurity")
actual <- test$Class
prediction <- predict(fit, test)
prediction <- prediction$predictions
rm(fit)
rm(train)
rm(test)
results <- caret::confusionMatrix(prediction, actual)
#results <- results$table
rm(actual)
rm(prediction)
results_test[[i]] <- results$byClass
}
setwd("/media/server2/Seagate Backup Plus Drive/Epitode_project/train")
resutls_train[[1]]
results_train[[1]]
results_train[[2]]
for (i in 1:10){
data <- results_train[[i]]
write.csv(paste0(Model_Epitode_train_result_[i], ".csv"), sep = "\t")
}
setwd("/media/server2/Seagate Backup Plus Drive/Epitode_project/train")
for (i in 1:10){
data <- results_train[[i]]
write.csv(paste0("Model_Epitode_Train_Result_", [i], ".csv"), sep = "\t")
}
?write.csv
paste0("Model_Epitode_Train_Result_", 1, ".csv")
for (i in 1:10){
data <- results_train[[i]]
write.csv(data, file = paste0("Model_Epitode_Train_Result_", [i], ".csv"), sep = "\t")
}
for (i in 1:10){
data <- results_train[[i]]
write.csv(data, file = paste0("Model_Epitode_Train_Result_", [i], ".csv"), sep = "\t")
}
setwd("/media/server2/Seagate Backup Plus Drive/Epitode_project/train")
for (i in 1:10){
data <- results_train[[i]]
write.csv(data, file = paste0("Model_Epitode_Train_Result_", i, ".csv"), sep = "\t")
}
setwd("/media/server2/Seagate Backup Plus Drive/Epitode_project/train")
for (i in 1:10){
data <- results_train[[i]]
write.csv(data, file = paste0("Model_Epitode_Train_Result_", i, ".csv"))
}
setwd("/media/server2/Seagate Backup Plus Drive/Epitode_project/test")
for (i in 1:10){
data <- results_test[[i]]
write.csv(data, file = paste0("Model_Epitode_Test_Result_", i, ".csv"))
}
##################################
#results 10-CV
results_CV <- list(10)
results_CV <- foreach(i = 1:10) %dopar% {
in_train <- caret::createDataPartition(df$Class, p = 0.80, list = FALSE)
myData <- df[in_train, ]
test <- df[-in_train, ]
rm(in_train)
rm(test)
k = 10
index <- sample(1:k, nrow(myData), replace = TRUE)
folds <- 1:k
myRes <- data.frame()
for (j in 1:k) {
training <- subset(myData, index %in% folds[-j])
testing <- subset(myData, index %in% c(j))
model <- ranger::ranger(Class ~., data = training, write.forest = TRUE,
save.memory = TRUE, importance = "impurity")
prediction <- predict(model, testing)
prediction <- prediction$predictions
actual <- testing$Label
rm(training)
rm(testing)
rm(model)
data <- cbind(prediction, actual)
rm(prediction)
rm(actual)
myRes <- rbind(myRes, data)
}
prediction <- myRes$prediction
actual <- myRes$actual
results <- caret::confusionMatrix(prediction, actual)
#results <- results$table
rm(fit)
rm(actual)
rm(prediction)
results_CV[[i]] <- results$byClass
}
stopCluster(cl)
stopCluster(cl)
